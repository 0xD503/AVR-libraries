
Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c71  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000765  00000000  00000000  00000fed  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000545  00000000  00000000  00001752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001c98  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051d  00000000  00000000  00001e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000033c  00000000  00000000  00002321  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  0000265d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 44 00 	call	0x88	; 0x88 <main>
  78:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
}

void setup (void)
{
	IO_Init();
	Stepper_Init();
  80:	0e 94 4b 00 	call	0x96	; 0x96 <Stepper_Init>
	
	sei();
  84:	78 94       	sei
  86:	08 95       	ret

00000088 <main>:
}

int main(void)
{
	setup();
  88:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	
	Stepper_Rotate(-45);
  8c:	83 ed       	ldi	r24, 0xD3	; 211
  8e:	9f ef       	ldi	r25, 0xFF	; 255
  90:	0e 94 88 00 	call	0x110	; 0x110 <Stepper_Rotate>
  94:	ff cf       	rjmp	.-2      	; 0x94 <main+0xc>

00000096 <Stepper_Init>:
void Stepper_OnePhase_AntiClockWise (void)
{
	Stepper_Step_2();
	Stepper_Step_4();
	Stepper_Step_6();
	Stepper_Step_8();
  96:	84 b1       	in	r24, 0x04	; 4
  98:	8f 60       	ori	r24, 0x0F	; 15
  9a:	84 b9       	out	0x04, r24	; 4
  9c:	85 b1       	in	r24, 0x05	; 5
  9e:	80 7f       	andi	r24, 0xF0	; 240
  a0:	85 b9       	out	0x05, r24	; 5
  a2:	08 95       	ret

000000a4 <Stepper_Step_1>:
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	85 b9       	out	0x05, r24	; 5
  a8:	8f e1       	ldi	r24, 0x1F	; 31
  aa:	9e e4       	ldi	r25, 0x4E	; 78
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <Stepper_Step_1+0x8>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <Stepper_Step_1+0xe>
  b2:	00 00       	nop
  b4:	08 95       	ret

000000b6 <Stepper_Step_3>:
  b6:	86 e0       	ldi	r24, 0x06	; 6
  b8:	85 b9       	out	0x05, r24	; 5
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	9e e4       	ldi	r25, 0x4E	; 78
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <Stepper_Step_3+0x8>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <Stepper_Step_3+0xe>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <Stepper_Step_5>:
  c8:	8c e0       	ldi	r24, 0x0C	; 12
  ca:	85 b9       	out	0x05, r24	; 5
  cc:	8f e1       	ldi	r24, 0x1F	; 31
  ce:	9e e4       	ldi	r25, 0x4E	; 78
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <Stepper_Step_5+0x8>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <Stepper_Step_5+0xe>
  d6:	00 00       	nop
  d8:	08 95       	ret

000000da <Stepper_Step_7>:
  da:	89 e0       	ldi	r24, 0x09	; 9
  dc:	85 b9       	out	0x05, r24	; 5
  de:	8f e1       	ldi	r24, 0x1F	; 31
  e0:	9e e4       	ldi	r25, 0x4E	; 78
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <Stepper_Step_7+0x8>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <Stepper_Step_7+0xe>
  e8:	00 00       	nop
  ea:	08 95       	ret

000000ec <Stepper_TwoPhase_Clockwise>:
  ec:	0e 94 6d 00 	call	0xda	; 0xda <Stepper_Step_7>
  f0:	0e 94 64 00 	call	0xc8	; 0xc8 <Stepper_Step_5>
  f4:	0e 94 5b 00 	call	0xb6	; 0xb6 <Stepper_Step_3>
  f8:	0e 94 52 00 	call	0xa4	; 0xa4 <Stepper_Step_1>
  fc:	08 95       	ret

000000fe <Stepper_TwoPhase_AntiClockwise>:
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <Stepper_Step_1>
 102:	0e 94 5b 00 	call	0xb6	; 0xb6 <Stepper_Step_3>
 106:	0e 94 64 00 	call	0xc8	; 0xc8 <Stepper_Step_5>
 10a:	0e 94 6d 00 	call	0xda	; 0xda <Stepper_Step_7>
 10e:	08 95       	ret

00000110 <Stepper_Rotate>:
}

void Stepper_Rotate (int16_t angle)
{
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
	uint8_t stepCounter;
	if ((angle < 181) && (angle > 0))
 118:	9c 01       	movw	r18, r24
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	31 09       	sbc	r19, r1
 11e:	24 3b       	cpi	r18, 0xB4	; 180
 120:	31 05       	cpc	r19, r1
 122:	58 f4       	brcc	.+22     	; 0x13a <Stepper_Rotate+0x2a>
	{
		stepCounter = angle / 4;
 124:	9c 01       	movw	r18, r24
 126:	99 23       	and	r25, r25
 128:	14 f4       	brge	.+4      	; 0x12e <Stepper_Rotate+0x1e>
 12a:	2d 5f       	subi	r18, 0xFD	; 253
 12c:	3f 4f       	sbci	r19, 0xFF	; 255
 12e:	35 95       	asr	r19
 130:	27 95       	ror	r18
 132:	35 95       	asr	r19
 134:	27 95       	ror	r18
 136:	d2 2f       	mov	r29, r18
 138:	45 c0       	rjmp	.+138    	; 0x1c4 <Stepper_Rotate+0xb4>
	} 
	else if ((angle > 180) && (angle < 361))
 13a:	9c 01       	movw	r18, r24
 13c:	25 5b       	subi	r18, 0xB5	; 181
 13e:	31 09       	sbc	r19, r1
 140:	24 3b       	cpi	r18, 0xB4	; 180
 142:	31 05       	cpc	r19, r1
 144:	70 f4       	brcc	.+28     	; 0x162 <Stepper_Rotate+0x52>
	{
		stepCounter = (((angle - 180) / 4) + 45);
 146:	ac 01       	movw	r20, r24
 148:	44 5b       	subi	r20, 0xB4	; 180
 14a:	51 09       	sbc	r21, r1
 14c:	9a 01       	movw	r18, r20
 14e:	12 f4       	brpl	.+4      	; 0x154 <Stepper_Rotate+0x44>
 150:	2d 5f       	subi	r18, 0xFD	; 253
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	35 95       	asr	r19
 156:	27 95       	ror	r18
 158:	35 95       	asr	r19
 15a:	27 95       	ror	r18
 15c:	dd e2       	ldi	r29, 0x2D	; 45
 15e:	d2 0f       	add	r29, r18
 160:	31 c0       	rjmp	.+98     	; 0x1c4 <Stepper_Rotate+0xb4>
	}
	else if ((angle < 0) && (angle > (-181)))
 162:	9c 01       	movw	r18, r24
 164:	2c 54       	subi	r18, 0x4C	; 76
 166:	3f 4f       	sbci	r19, 0xFF	; 255
 168:	24 3b       	cpi	r18, 0xB4	; 180
 16a:	31 05       	cpc	r19, r1
 16c:	90 f4       	brcc	.+36     	; 0x192 <Stepper_Rotate+0x82>
	{
		stepCounter = ((abs(angle)) / 4);
 16e:	ac 01       	movw	r20, r24
 170:	99 23       	and	r25, r25
 172:	24 f4       	brge	.+8      	; 0x17c <Stepper_Rotate+0x6c>
 174:	44 27       	eor	r20, r20
 176:	55 27       	eor	r21, r21
 178:	48 1b       	sub	r20, r24
 17a:	59 0b       	sbc	r21, r25
 17c:	9a 01       	movw	r18, r20
 17e:	55 23       	and	r21, r21
 180:	14 f4       	brge	.+4      	; 0x186 <Stepper_Rotate+0x76>
 182:	2d 5f       	subi	r18, 0xFD	; 253
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	35 95       	asr	r19
 188:	27 95       	ror	r18
 18a:	35 95       	asr	r19
 18c:	27 95       	ror	r18
 18e:	d2 2f       	mov	r29, r18
 190:	19 c0       	rjmp	.+50     	; 0x1c4 <Stepper_Rotate+0xb4>
	} 
	else if ((angle < (-180)) && (angle > (-360)))
 192:	9c 01       	movw	r18, r24
 194:	29 59       	subi	r18, 0x99	; 153
 196:	3e 4f       	sbci	r19, 0xFE	; 254
 198:	23 3b       	cpi	r18, 0xB3	; 179
 19a:	31 05       	cpc	r19, r1
 19c:	98 f4       	brcc	.+38     	; 0x1c4 <Stepper_Rotate+0xb4>
	{
		stepCounter = ((((abs(angle)) - 180) / 4) + 45);
 19e:	ac 01       	movw	r20, r24
 1a0:	99 23       	and	r25, r25
 1a2:	24 f4       	brge	.+8      	; 0x1ac <Stepper_Rotate+0x9c>
 1a4:	44 27       	eor	r20, r20
 1a6:	55 27       	eor	r21, r21
 1a8:	48 1b       	sub	r20, r24
 1aa:	59 0b       	sbc	r21, r25
 1ac:	44 5b       	subi	r20, 0xB4	; 180
 1ae:	51 09       	sbc	r21, r1
 1b0:	9a 01       	movw	r18, r20
 1b2:	12 f4       	brpl	.+4      	; 0x1b8 <Stepper_Rotate+0xa8>
 1b4:	2d 5f       	subi	r18, 0xFD	; 253
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	35 95       	asr	r19
 1ba:	27 95       	ror	r18
 1bc:	35 95       	asr	r19
 1be:	27 95       	ror	r18
 1c0:	dd e2       	ldi	r29, 0x2D	; 45
 1c2:	d2 0f       	add	r29, r18
	}
	else	;
	
	stepCounter /= STEPPER_STEP_ANGLE;
	for (uint8_t counter = 0; counter < stepCounter; counter++)
 1c4:	dd 23       	and	r29, r29
 1c6:	69 f0       	breq	.+26     	; 0x1e2 <Stepper_Rotate+0xd2>
 1c8:	8c 01       	movw	r16, r24
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if (angle > 0)
 1cc:	10 16       	cp	r1, r16
 1ce:	11 06       	cpc	r1, r17
 1d0:	1c f4       	brge	.+6      	; 0x1d8 <Stepper_Rotate+0xc8>
		{
			Stepper_TwoPhase_AntiClockwise();
 1d2:	0e 94 7f 00 	call	0xfe	; 0xfe <Stepper_TwoPhase_AntiClockwise>
 1d6:	02 c0       	rjmp	.+4      	; 0x1dc <Stepper_Rotate+0xcc>
		} 
		else
		{
			Stepper_TwoPhase_Clockwise();
 1d8:	0e 94 76 00 	call	0xec	; 0xec <Stepper_TwoPhase_Clockwise>
		stepCounter = ((((abs(angle)) - 180) / 4) + 45);
	}
	else	;
	
	stepCounter /= STEPPER_STEP_ANGLE;
	for (uint8_t counter = 0; counter < stepCounter; counter++)
 1dc:	cf 5f       	subi	r28, 0xFF	; 255
 1de:	dc 13       	cpse	r29, r28
 1e0:	f5 cf       	rjmp	.-22     	; 0x1cc <Stepper_Rotate+0xbc>
		else
		{
			Stepper_TwoPhase_Clockwise();
		}
	}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	1f 91       	pop	r17
 1e8:	0f 91       	pop	r16
 1ea:	08 95       	ret

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
