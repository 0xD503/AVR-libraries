
USART 328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000001f0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800104  00800104  00000288  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a2e  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  00000dae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000367  00000000  00000000  000015b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004bb  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f4  00000000  00000000  00001f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000220b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_18>
  4c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 32       	cpi	r26, 0x28	; 40
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 57 00 	call	0xae	; 0xae <main>
  9e:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup>:
}

void setup (void)
{
	IO_Init();
	USART_Init();
  a6:	0e 94 70 00 	call	0xe0	; 0xe0 <USART_Init>
	
	sei();
  aa:	78 94       	sei
  ac:	08 95       	ret

000000ae <main>:
}

int main (void)
{
	setup();
  ae:	0e 94 53 00 	call	0xa6	; 0xa6 <setup>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	83 ed       	ldi	r24, 0xD3	; 211
  b6:	90 e3       	ldi	r25, 0x30	; 48
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0xa>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x14>
  c2:	00 00       	nop
	//USART_PutByte (a);
	
	while (1)
	{
		_delay_ms(1000);
		USART_SendString((int8_t* ) a);
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	0e 94 96 00 	call	0x12c	; 0x12c <USART_SendString>
  cc:	f2 cf       	rjmp	.-28     	; 0xb2 <main+0x4>

000000ce <USART_FlushBuffers>:
}

void USART_ReceiveString (int8_t* data)
{
	for (uint8_t i = 0; data[i] != 0; i++)	data[i] = USART_GetByte();					//	Read by byte, until we detect NULL character (or the end of the line)
}
  ce:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <USART_TxHead>
  d2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <USART_TxTail>
  d6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <USART_RxHead>
  da:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
  de:	08 95       	ret

000000e0 <USART_Init>:
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  e4:	83 e3       	ldi	r24, 0x33	; 51
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  ea:	e1 ec       	ldi	r30, 0xC1	; 193
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	88 69       	ori	r24, 0x98	; 152
  f2:	80 83       	st	Z, r24
  f4:	e2 ec       	ldi	r30, 0xC2	; 194
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	86 60       	ori	r24, 0x06	; 6
  fc:	80 83       	st	Z, r24
  fe:	0e 94 67 00 	call	0xce	; 0xce <USART_FlushBuffers>
 102:	08 95       	ret

00000104 <USART_PutByte>:
 104:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <USART_TxTail>
 108:	ef 5f       	subi	r30, 0xFF	; 255
 10a:	ef 70       	andi	r30, 0x0F	; 15
 10c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <USART_TxHead>
 110:	e9 17       	cp	r30, r25
 112:	e1 f3       	breq	.-8      	; 0x10c <USART_PutByte+0x8>
 114:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <USART_TxTail>
 118:	f0 e0       	ldi	r31, 0x00	; 0
 11a:	e8 5e       	subi	r30, 0xE8	; 232
 11c:	fe 4f       	sbci	r31, 0xFE	; 254
 11e:	80 83       	st	Z, r24
 120:	e1 ec       	ldi	r30, 0xC1	; 193
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	80 62       	ori	r24, 0x20	; 32
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <USART_SendString>:
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	88 23       	and	r24, r24
 138:	59 f0       	breq	.+22     	; 0x150 <USART_SendString+0x24>
 13a:	8f 01       	movw	r16, r30
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	0e 94 82 00 	call	0x104	; 0x104 <USART_PutByte>
 142:	cf 5f       	subi	r28, 0xFF	; 255
 144:	f8 01       	movw	r30, r16
 146:	ec 0f       	add	r30, r28
 148:	f1 1d       	adc	r31, r1
 14a:	80 81       	ld	r24, Z
 14c:	81 11       	cpse	r24, r1
 14e:	f7 cf       	rjmp	.-18     	; 0x13e <USART_SendString+0x12>
 150:	cf 91       	pop	r28
 152:	1f 91       	pop	r17
 154:	0f 91       	pop	r16
 156:	08 95       	ret

00000158 <__vector_19>:

ISR (USART_UDRE_vect)
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	if (USART_TxHead != USART_TxTail)													//	If there's a clean place in the buffer
 16a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <USART_TxHead>
 16e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <USART_TxTail>
 172:	98 17       	cp	r25, r24
 174:	69 f0       	breq	.+26     	; 0x190 <__vector_19+0x38>
	{
		uint8_t tempTxHead = (USART_TxHead + 1) & USART_BUFFER_MASK;					//	Increment head
 176:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <USART_TxHead>
 17a:	ef 5f       	subi	r30, 0xFF	; 255
 17c:	ef 70       	andi	r30, 0x0F	; 15
		USART_TxHead = tempTxHead;
 17e:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <USART_TxHead>
		UDR0 = USART_TransmitBuffer[tempTxHead];										//	And place in the USART Data Register byte
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e8 5e       	subi	r30, 0xE8	; 232
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 81       	ld	r24, Z
 18a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 18e:	05 c0       	rjmp	.+10     	; 0x19a <__vector_19+0x42>
	}
	else	UCSR0B &= ~(1 << UDRIE0);													//	Else disable interrupt
 190:	e1 ec       	ldi	r30, 0xC1	; 193
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	80 83       	st	Z, r24
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <__vector_18>:

ISR (USART_RX_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
 1ba:	ef 93       	push	r30
 1bc:	ff 93       	push	r31
	int8_t byte = UDR0;																	//	Saving UDR value
 1be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	uint8_t tempRxTail = (USART_RxTail + 1) & USART_BUFFER_MASK;						//	Increment RxTail value
 1c2:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <__data_end>
 1c6:	ef 5f       	subi	r30, 0xFF	; 255
 1c8:	ef 70       	andi	r30, 0x0F	; 15
	USART_RxTail = tempRxTail;															//	Saving RxTail value
 1ca:	e0 93 04 01 	sts	0x0104, r30	; 0x800104 <__data_end>
	if (USART_RxHead == tempRxTail)																	
 1ce:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <USART_RxHead>
		//	Buffer overflow
		//
		
		//	PORTD |= 0x80;
	}
	USART_ReceiveBuffer[tempRxTail] = byte;												//	Saving UDR value in the receive buffer
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e8 5f       	subi	r30, 0xF8	; 248
 1d6:	fe 4f       	sbci	r31, 0xFE	; 254
 1d8:	80 83       	st	Z, r24
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	0f 90       	pop	r0
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	0f 90       	pop	r0
 1e8:	1f 90       	pop	r1
 1ea:	18 95       	reti

000001ec <_exit>:
 1ec:	f8 94       	cli

000001ee <__stop_program>:
 1ee:	ff cf       	rjmp	.-2      	; 0x1ee <__stop_program>
