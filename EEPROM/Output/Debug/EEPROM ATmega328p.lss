
EEPROM ATmega328p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000224  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000298  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eae  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f7  00000000  00000000  000012a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000794  00000000  00000000  00001b9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002334  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ae  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000461  00000000  00000000  00002a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00002efb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_22>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 03 01 	call	0x206	; 0x206 <main>
  88:	0c 94 10 01 	jmp	0x220	; 0x220 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <EEPROM_PutByte>:
{
	
}

void EEPROM_ReadString (int8_t* placeToReceive, uint16_t address)
{
  90:	70 93 02 01 	sts	0x0102, r23	; 0x800102 <EEPROM_PutToAddress+0x1>
  94:	60 93 01 01 	sts	0x0101, r22	; 0x800101 <EEPROM_PutToAddress>
  98:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  9c:	88 e0       	ldi	r24, 0x08	; 8
  9e:	8f bb       	out	0x1f, r24	; 31
  a0:	08 95       	ret

000000a2 <__vector_22>:
	
}


ISR (EE_READY_vect)
{
  a2:	1f 92       	push	r1
  a4:	0f 92       	push	r0
  a6:	0f b6       	in	r0, 0x3f	; 63
  a8:	0f 92       	push	r0
  aa:	11 24       	eor	r1, r1
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
	EEAR = EEPROM_PutToAddress;					// 	3. Write new EEPROM address to EEAR (optional).
  b0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <EEPROM_PutToAddress>
  b4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <EEPROM_PutToAddress+0x1>
  b8:	92 bd       	out	0x22, r25	; 34
  ba:	81 bd       	out	0x21, r24	; 33
	EEDR = EEPROM_ByteToPut;					// 	4. Write new EEPROM data to EEDR (optional).
  bc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c0:	80 bd       	out	0x20, r24	; 32
	
	EECR &= ~(1 << EERIE);						//	
  c2:	fb 98       	cbi	0x1f, 3	; 31
	
	EECR |= 1 << EEMPE;							// 	5. Write a '1' to the EEMPE bit while writing a zero to EEPE in EECR.
  c4:	fa 9a       	sbi	0x1f, 2	; 31
	EECR |= 1 << EEPE;							// 	6. Within four clock cycles after setting EEMPE, write a '1' to EEPE.
  c6:	f9 9a       	sbi	0x1f, 1	; 31
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	0f 90       	pop	r0
  ce:	0f be       	out	0x3f, r0	; 63
  d0:	0f 90       	pop	r0
  d2:	1f 90       	pop	r1
  d4:	18 95       	reti

000000d6 <LCD_GetAddressAndBFStatus>:
	LCD_STROBE_DOWN;
	lowNibble >>= 4;
	LCD_Data |= lowNibble;
	
	LCD_DDR |= (1 << LCD_DATA_PIN_4 | 1 << LCD_DATA_PIN_5 | 1 << LCD_DATA_PIN_6 | 1 << LCD_DATA_PIN_7);				//	Set LCD pins as outputs
	LCD_CheckBF();
  d6:	8a b1       	in	r24, 0x0a	; 10
  d8:	8f 70       	andi	r24, 0x0F	; 15
  da:	8a b9       	out	0x0a, r24	; 10
  dc:	8e 60       	ori	r24, 0x0E	; 14
  de:	8a b9       	out	0x0a, r24	; 10
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	8f 70       	andi	r24, 0x0F	; 15
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	5a 9a       	sbi	0x0b, 2	; 11
  e8:	59 98       	cbi	0x0b, 1	; 11
  ea:	5b 9a       	sbi	0x0b, 3	; 11
  ec:	00 00       	nop
  ee:	00 00       	nop
  f0:	89 b1       	in	r24, 0x09	; 9
  f2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <LCD_Address>
  f6:	5b 98       	cbi	0x0b, 3	; 11
  f8:	00 00       	nop
  fa:	00 00       	nop
  fc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <LCD_Address>
 100:	80 7f       	andi	r24, 0xF0	; 240
 102:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <LCD_Address>
 106:	5b 9a       	sbi	0x0b, 3	; 11
 108:	00 00       	nop
 10a:	00 00       	nop
 10c:	89 b1       	in	r24, 0x09	; 9
 10e:	5b 98       	cbi	0x0b, 3	; 11
 110:	82 95       	swap	r24
 112:	8f 70       	andi	r24, 0x0F	; 15
 114:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <LCD_Address>
 118:	89 2b       	or	r24, r25
 11a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <LCD_Address>
 11e:	8a b1       	in	r24, 0x0a	; 10
 120:	80 6f       	ori	r24, 0xF0	; 240
 122:	8a b9       	out	0x0a, r24	; 10
 124:	08 95       	ret

00000126 <LCD_CheckBF>:
 126:	0e 94 6b 00 	call	0xd6	; 0xd6 <LCD_GetAddressAndBFStatus>
 12a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <LCD_Address>
 12e:	88 23       	and	r24, r24
 130:	d4 f3       	brlt	.-12     	; 0x126 <LCD_CheckBF>
 132:	08 95       	ret

00000134 <LCD_SendInstructionAndData>:
 134:	5a 98       	cbi	0x0b, 2	; 11
 136:	61 11       	cpse	r22, r1
 138:	02 c0       	rjmp	.+4      	; 0x13e <LCD_SendInstructionAndData+0xa>
 13a:	59 98       	cbi	0x0b, 1	; 11
 13c:	01 c0       	rjmp	.+2      	; 0x140 <LCD_SendInstructionAndData+0xc>
 13e:	59 9a       	sbi	0x0b, 1	; 11
 140:	9b b1       	in	r25, 0x0b	; 11
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	9b b9       	out	0x0b, r25	; 11
 146:	9b b1       	in	r25, 0x0b	; 11
 148:	28 2f       	mov	r18, r24
 14a:	20 7f       	andi	r18, 0xF0	; 240
 14c:	92 2b       	or	r25, r18
 14e:	9b b9       	out	0x0b, r25	; 11
 150:	5b 9a       	sbi	0x0b, 3	; 11
 152:	00 00       	nop
 154:	00 00       	nop
 156:	00 00       	nop
 158:	5b 98       	cbi	0x0b, 3	; 11
 15a:	00 00       	nop
 15c:	00 00       	nop
 15e:	9b b1       	in	r25, 0x0b	; 11
 160:	9f 70       	andi	r25, 0x0F	; 15
 162:	9b b9       	out	0x0b, r25	; 11
 164:	9b b1       	in	r25, 0x0b	; 11
 166:	82 95       	swap	r24
 168:	80 7f       	andi	r24, 0xF0	; 240
 16a:	89 2b       	or	r24, r25
 16c:	8b b9       	out	0x0b, r24	; 11
 16e:	5b 9a       	sbi	0x0b, 3	; 11
 170:	00 00       	nop
 172:	00 00       	nop
 174:	00 00       	nop
 176:	5b 98       	cbi	0x0b, 3	; 11
 178:	0e 94 93 00 	call	0x126	; 0x126 <LCD_CheckBF>
 17c:	08 95       	ret

0000017e <LCD_PutInstruction>:
 17e:	60 e0       	ldi	r22, 0x00	; 0
 180:	0e 94 9a 00 	call	0x134	; 0x134 <LCD_SendInstructionAndData>
 184:	08 95       	ret

00000186 <sendInstructionLCD8>:
}

void sendInstructionLCD8 (uint8_t byte)
{
	LCD_PORT = byte;
 186:	8b b9       	out	0x0b, r24	; 11
	LCD_STROBE_UP;
 188:	5b 9a       	sbi	0x0b, 3	; 11
	asm ("nop");
 18a:	00 00       	nop
	asm ("nop");
 18c:	00 00       	nop
	asm ("nop");
 18e:	00 00       	nop
	LCD_STROBE_DOWN;
 190:	5b 98       	cbi	0x0b, 3	; 11
 192:	08 95       	ret

00000194 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	99 ef       	ldi	r25, 0xF9	; 249
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x4>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0xa>
 19e:	00 00       	nop
}

void LCD_Init (void)
{
	_delay_ms(16);
	sendInstructionLCD8(0x30);							//	8-bit mode
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	0e 94 c3 00 	call	0x186	; 0x186 <sendInstructionLCD8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	8f e4       	ldi	r24, 0x4F	; 79
 1a8:	96 e4       	ldi	r25, 0x46	; 70
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCD_Init+0x16>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <LCD_Init+0x1c>
 1b0:	00 00       	nop
	_delay_us(4500);
	sendInstructionLCD8(0x30);							//	8-bit mode
 1b2:	80 e3       	ldi	r24, 0x30	; 48
 1b4:	0e 94 c3 00 	call	0x186	; 0x186 <sendInstructionLCD8>
 1b8:	8b ec       	ldi	r24, 0xCB	; 203
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Init+0x28>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <LCD_Init+0x2e>
 1c2:	00 00       	nop
	_delay_us(115);
	sendInstructionLCD8(0x30);							//	8-bit mode
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	0e 94 c3 00 	call	0x186	; 0x186 <sendInstructionLCD8>
	LCD_CheckBF();										//	Busy Flag waiting
 1ca:	0e 94 93 00 	call	0x126	; 0x126 <LCD_CheckBF>
	sendInstructionLCD8(0x20);							//	4-bit mode
 1ce:	80 e2       	ldi	r24, 0x20	; 32
 1d0:	0e 94 c3 00 	call	0x186	; 0x186 <sendInstructionLCD8>
	LCD_CheckBF();
 1d4:	0e 94 93 00 	call	0x126	; 0x126 <LCD_CheckBF>
	LCD_PutInstruction(LCD_4_BIT_2_LINES_FONT_5X8);		//	Character font 5x8
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_PutInstruction>
	LCD_PutInstruction(LCD_SHIFT_CURSOR_TO_THE_RIGHT);	// 
 1de:	84 e1       	ldi	r24, 0x14	; 20
 1e0:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_PutInstruction>
	LCD_PutInstruction(LCD_CURSOR_ON_BLINKING_ON);		//	
 1e4:	8f e0       	ldi	r24, 0x0F	; 15
 1e6:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_PutInstruction>
	LCD_PutInstruction(LCD_INCREMENT_CURSOR);			// 
 1ea:	86 e0       	ldi	r24, 0x06	; 6
 1ec:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_PutInstruction>
	LCD_PutInstruction(LCD_RETURN_HOME);				//	Entry mode set
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_PutInstruction>
	LCD_PutInstruction(LCD_CLEAR_DISPLAY);
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_PutInstruction>
 1fc:	08 95       	ret

000001fe <setup>:
}

void setup (void)
{
	IO_Init();
	LCD_Init();
 1fe:	0e 94 ca 00 	call	0x194	; 0x194 <LCD_Init>
	
	sei();
 202:	78 94       	sei
 204:	08 95       	ret

00000206 <main>:
}

int main (void)
{
	setup();
 206:	0e 94 ff 00 	call	0x1fe	; 0x1fe <setup>
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	d0 e0       	ldi	r29, 0x00	; 0
	
//	EEPROM_WriteString((int8_t* ) "wqw", 413);
//	int8_t* f = NULL;
	int8_t r = 0xFF;
	for (uint8_t i = 0; i <= 100; i++)	EEPROM_PutByte(r, i);
 20e:	be 01       	movw	r22, r28
 210:	8f ef       	ldi	r24, 0xFF	; 255
 212:	0e 94 48 00 	call	0x90	; 0x90 <EEPROM_PutByte>
 216:	21 96       	adiw	r28, 0x01	; 1
 218:	c5 36       	cpi	r28, 0x65	; 101
 21a:	d1 05       	cpc	r29, r1
 21c:	c1 f7       	brne	.-16     	; 0x20e <main+0x8>
 21e:	ff cf       	rjmp	.-2      	; 0x21e <main+0x18>

00000220 <_exit>:
 220:	f8 94       	cli

00000222 <__stop_program>:
 222:	ff cf       	rjmp	.-2      	; 0x222 <__stop_program>
