
ADC (ATmega328).elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  000003c0  00000454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010a  0080010a  0000045e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000045e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  000004d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f3d  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a5  00000000  00000000  000014ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000858  00000000  00000000  00001e92  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  000026ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000567  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000417  00000000  00000000  00002de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000031fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 75 00 	jmp	0xea	; 0xea <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ec       	ldi	r30, 0xC0	; 192
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 30       	cpi	r26, 0x0A	; 10
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e0       	ldi	r26, 0x0A	; 10
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4d 01 	call	0x29a	; 0x29a <main>
  9e:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
	_delay_us(104);
}

void ADC_StopConversion (void)
{
	ADCSRA	&= ~(1 << ADEN | 1 << ADSC | 1 << ADATE | 1 << ADIE | 0 << ADPS2 | 0 << ADPS1 | 0 << ADPS0);
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	87 60       	ori	r24, 0x07	; 7
  b8:	80 83       	st	Z, r24
  ba:	ee e7       	ldi	r30, 0x7E	; 126
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	80 83       	st	Z, r24
  c4:	08 95       	ret

000000c6 <ADC_StartFreeRunningConversion>:
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	90 81       	ld	r25, Z
  cc:	98 7f       	andi	r25, 0xF8	; 248
  ce:	89 2b       	or	r24, r25
  d0:	80 83       	st	Z, r24
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 6e       	ori	r24, 0xE8	; 232
  da:	80 83       	st	Z, r24
  dc:	8f e9       	ldi	r24, 0x9F	; 159
  de:	91 e0       	ldi	r25, 0x01	; 1
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <ADC_StartFreeRunningConversion+0x1a>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <ADC_StartFreeRunningConversion+0x20>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <__vector_21>:
}


ISR (ADC_vect)
{
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	2f 93       	push	r18
  f6:	8f 93       	push	r24
  f8:	9f 93       	push	r25
	ADC_ResultOfConversion = ADCL;
  fa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 104:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
	ADC_ResultOfConversion |= ADCH << 8;
 108:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 10c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
 110:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <__data_end+0x1>
 114:	92 2b       	or	r25, r18
 116:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__data_end+0x1>
 11a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
}
 11e:	9f 91       	pop	r25
 120:	8f 91       	pop	r24
 122:	2f 91       	pop	r18
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <LCD_GetAddressAndBFStatus>:
	LCD_STROBE_DOWN;
	lowNibble >>= 4;
	LCD_Data |= lowNibble;
	
	LCD_DDR |= (1 << LCD_DATA_PIN_4 | 1 << LCD_DATA_PIN_5 | 1 << LCD_DATA_PIN_6 | 1 << LCD_DATA_PIN_7);				//	Set LCD pins as outputs
	LCD_CheckBF();
 12e:	8a b1       	in	r24, 0x0a	; 10
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	8a b9       	out	0x0a, r24	; 10
 134:	8e 60       	ori	r24, 0x0E	; 14
 136:	8a b9       	out	0x0a, r24	; 10
 138:	8b b1       	in	r24, 0x0b	; 11
 13a:	8f 70       	andi	r24, 0x0F	; 15
 13c:	8b b9       	out	0x0b, r24	; 11
 13e:	5a 9a       	sbi	0x0b, 2	; 11
 140:	59 98       	cbi	0x0b, 1	; 11
 142:	5b 9a       	sbi	0x0b, 3	; 11
 144:	00 00       	nop
 146:	00 00       	nop
 148:	89 b1       	in	r24, 0x09	; 9
 14a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <LCD_Address>
 14e:	5b 98       	cbi	0x0b, 3	; 11
 150:	00 00       	nop
 152:	00 00       	nop
 154:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LCD_Address>
 158:	80 7f       	andi	r24, 0xF0	; 240
 15a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <LCD_Address>
 15e:	5b 9a       	sbi	0x0b, 3	; 11
 160:	00 00       	nop
 162:	00 00       	nop
 164:	89 b1       	in	r24, 0x09	; 9
 166:	5b 98       	cbi	0x0b, 3	; 11
 168:	82 95       	swap	r24
 16a:	8f 70       	andi	r24, 0x0F	; 15
 16c:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <LCD_Address>
 170:	89 2b       	or	r24, r25
 172:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <LCD_Address>
 176:	8a b1       	in	r24, 0x0a	; 10
 178:	80 6f       	ori	r24, 0xF0	; 240
 17a:	8a b9       	out	0x0a, r24	; 10
 17c:	08 95       	ret

0000017e <LCD_CheckBF>:
 17e:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_GetAddressAndBFStatus>
 182:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <LCD_Address>
 186:	88 23       	and	r24, r24
 188:	d4 f3       	brlt	.-12     	; 0x17e <LCD_CheckBF>
 18a:	08 95       	ret

0000018c <LCD_SendInstructionAndData>:
 18c:	5a 98       	cbi	0x0b, 2	; 11
 18e:	61 11       	cpse	r22, r1
 190:	02 c0       	rjmp	.+4      	; 0x196 <LCD_SendInstructionAndData+0xa>
 192:	59 98       	cbi	0x0b, 1	; 11
 194:	01 c0       	rjmp	.+2      	; 0x198 <LCD_SendInstructionAndData+0xc>
 196:	59 9a       	sbi	0x0b, 1	; 11
 198:	9b b1       	in	r25, 0x0b	; 11
 19a:	9f 70       	andi	r25, 0x0F	; 15
 19c:	9b b9       	out	0x0b, r25	; 11
 19e:	9b b1       	in	r25, 0x0b	; 11
 1a0:	28 2f       	mov	r18, r24
 1a2:	20 7f       	andi	r18, 0xF0	; 240
 1a4:	92 2b       	or	r25, r18
 1a6:	9b b9       	out	0x0b, r25	; 11
 1a8:	5b 9a       	sbi	0x0b, 3	; 11
 1aa:	00 00       	nop
 1ac:	00 00       	nop
 1ae:	00 00       	nop
 1b0:	5b 98       	cbi	0x0b, 3	; 11
 1b2:	00 00       	nop
 1b4:	00 00       	nop
 1b6:	9b b1       	in	r25, 0x0b	; 11
 1b8:	9f 70       	andi	r25, 0x0F	; 15
 1ba:	9b b9       	out	0x0b, r25	; 11
 1bc:	9b b1       	in	r25, 0x0b	; 11
 1be:	82 95       	swap	r24
 1c0:	80 7f       	andi	r24, 0xF0	; 240
 1c2:	89 2b       	or	r24, r25
 1c4:	8b b9       	out	0x0b, r24	; 11
 1c6:	5b 9a       	sbi	0x0b, 3	; 11
 1c8:	00 00       	nop
 1ca:	00 00       	nop
 1cc:	00 00       	nop
 1ce:	5b 98       	cbi	0x0b, 3	; 11
 1d0:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_CheckBF>
 1d4:	08 95       	ret

000001d6 <LCD_PutInstruction>:
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_SendInstructionAndData>
 1dc:	08 95       	ret

000001de <LCD_PutByte>:
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_SendInstructionAndData>
 1e4:	08 95       	ret

000001e6 <LCD_SendString>:
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	ec 01       	movw	r28, r24
 1ec:	88 81       	ld	r24, Y
 1ee:	88 23       	and	r24, r24
 1f0:	31 f0       	breq	.+12     	; 0x1fe <LCD_SendString+0x18>
 1f2:	21 96       	adiw	r28, 0x01	; 1
 1f4:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_PutByte>
 1f8:	89 91       	ld	r24, Y+
 1fa:	81 11       	cpse	r24, r1
 1fc:	fb cf       	rjmp	.-10     	; 0x1f4 <LCD_SendString+0xe>
 1fe:	df 91       	pop	r29
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <LCD_SetPosition>:
 204:	90 e4       	ldi	r25, 0x40	; 64
 206:	69 9f       	mul	r22, r25
 208:	80 0d       	add	r24, r0
 20a:	11 24       	eor	r1, r1
 20c:	81 54       	subi	r24, 0x41	; 65
 20e:	80 68       	ori	r24, 0x80	; 128
 210:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_PutInstruction>
 214:	08 95       	ret

00000216 <sendInstructionLCD8>:
}

void sendInstructionLCD8 (uint8_t byte)
{
	LCD_PORT = byte;
 216:	8b b9       	out	0x0b, r24	; 11
	LCD_STROBE_UP;
 218:	5b 9a       	sbi	0x0b, 3	; 11
	asm ("nop");
 21a:	00 00       	nop
	asm ("nop");
 21c:	00 00       	nop
	asm ("nop");
 21e:	00 00       	nop
	LCD_STROBE_DOWN;
 220:	5b 98       	cbi	0x0b, 3	; 11
 222:	08 95       	ret

00000224 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	99 ef       	ldi	r25, 0xF9	; 249
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x4>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Init+0xa>
 22e:	00 00       	nop
}

void LCD_Init (void)
{
	_delay_ms(16);
	sendInstructionLCD8(0x30);					//	8-bit mode
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	0e 94 0b 01 	call	0x216	; 0x216 <sendInstructionLCD8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	8f e4       	ldi	r24, 0x4F	; 79
 238:	96 e4       	ldi	r25, 0x46	; 70
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Init+0x16>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Init+0x1c>
 240:	00 00       	nop
	_delay_us(4500);
	sendInstructionLCD8(0x30);					//	8-bit mode
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	0e 94 0b 01 	call	0x216	; 0x216 <sendInstructionLCD8>
 248:	8b ec       	ldi	r24, 0xCB	; 203
 24a:	91 e0       	ldi	r25, 0x01	; 1
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_Init+0x28>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_Init+0x2e>
 252:	00 00       	nop
	_delay_us(115);
	sendInstructionLCD8(0x30);					//	8-bit mode
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	0e 94 0b 01 	call	0x216	; 0x216 <sendInstructionLCD8>
	LCD_CheckBF();								//	Busy Flag waiting
 25a:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_CheckBF>
	sendInstructionLCD8(0x20);					//	4-bit mode
 25e:	80 e2       	ldi	r24, 0x20	; 32
 260:	0e 94 0b 01 	call	0x216	; 0x216 <sendInstructionLCD8>
	LCD_CheckBF();
 264:	0e 94 bf 00 	call	0x17e	; 0x17e <LCD_CheckBF>
	LCD_PutInstruction(0x28);					//	4-bit mode, 2 lines, character font 5x8
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_PutInstruction>
	LCD_PutInstruction(0x14);					// 
 26e:	84 e1       	ldi	r24, 0x14	; 20
 270:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_PutInstruction>
	LCD_PutInstruction(0x0F);					//	Display on, cursor on, blinking on
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_PutInstruction>
	LCD_PutInstruction(0x06);					// 
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_PutInstruction>
	LCD_PutInstruction(0x10);					//	Entry mode set
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_PutInstruction>
	LCD_PutInstruction(LCD_CLEAR_DISPLAY);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_PutInstruction>
 28c:	08 95       	ret

0000028e <setup>:
}

void setup (void)
{
	IO_Init();
	LCD_Init();
 28e:	0e 94 12 01 	call	0x224	; 0x224 <LCD_Init>
	ADC_Init();
 292:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	
	sei();
 296:	78 94       	sei
 298:	08 95       	ret

0000029a <main>:
}

int main (void)
{
	setup();
 29a:	0e 94 47 01 	call	0x28e	; 0x28e <setup>
	
	uint16_t res  = 0;
	//ADC_NormalConversion(0);
	ADC_StartFreeRunningConversion(0);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 63 00 	call	0xc6	; 0xc6 <ADC_StartFreeRunningConversion>
		LCD_SendString((int8_t *) "Voltage: ");
		
		LCD_PutByte((res / 1000) + ASCII_NULL);
		LCD_PutByte('.');
		
		LCD_PutByte(((res % 1000) / 100) + ASCII_NULL);
 2a4:	08 ee       	ldi	r16, 0xE8	; 232
 2a6:	13 e0       	ldi	r17, 0x03	; 3
		LCD_PutByte((((res % 1000) % 100) / 10) + ASCII_NULL);
 2a8:	0f 2e       	mov	r0, r31
 2aa:	f4 e6       	ldi	r31, 0x64	; 100
 2ac:	df 2e       	mov	r13, r31
 2ae:	f0 2d       	mov	r31, r0
	ADC_StartFreeRunningConversion(0);
	
	while (1)
	{
//		ADC_StartSingleConversion(0);
		res = ((ADC_ResultOfConversion % 1024) * ADC_REFERENCE_VOLTAGE);
 2b0:	c0 91 0a 01 	lds	r28, 0x010A	; 0x80010a <__data_end>
 2b4:	d0 91 0b 01 	lds	r29, 0x010B	; 0x80010b <__data_end+0x1>
 2b8:	d3 70       	andi	r29, 0x03	; 3
 2ba:	ce 01       	movw	r24, r28
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	88 0f       	add	r24, r24
 2c2:	99 1f       	adc	r25, r25
 2c4:	c8 0f       	add	r28, r24
 2c6:	d9 1f       	adc	r29, r25
		
		LCD_SetPosition(1, 1);
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 02 01 	call	0x204	; 0x204 <LCD_SetPosition>
		
		LCD_SendString((int8_t *) "Voltage: ");
 2d0:	80 e0       	ldi	r24, 0x00	; 0
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <LCD_SendString>
		
		LCD_PutByte((res / 1000) + ASCII_NULL);
 2d8:	9e 01       	movw	r18, r28
 2da:	36 95       	lsr	r19
 2dc:	27 95       	ror	r18
 2de:	36 95       	lsr	r19
 2e0:	27 95       	ror	r18
 2e2:	36 95       	lsr	r19
 2e4:	27 95       	ror	r18
 2e6:	a5 ec       	ldi	r26, 0xC5	; 197
 2e8:	b0 e2       	ldi	r27, 0x20	; 32
 2ea:	0e 94 cf 01 	call	0x39e	; 0x39e <__umulhisi3>
 2ee:	7c 01       	movw	r14, r24
 2f0:	f6 94       	lsr	r15
 2f2:	e7 94       	ror	r14
 2f4:	f6 94       	lsr	r15
 2f6:	e7 94       	ror	r14
 2f8:	f6 94       	lsr	r15
 2fa:	e7 94       	ror	r14
 2fc:	f6 94       	lsr	r15
 2fe:	e7 94       	ror	r14
 300:	80 e3       	ldi	r24, 0x30	; 48
 302:	8e 0d       	add	r24, r14
 304:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_PutByte>
		LCD_PutByte('.');
 308:	8e e2       	ldi	r24, 0x2E	; 46
 30a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_PutByte>
		
		LCD_PutByte(((res % 1000) / 100) + ASCII_NULL);
 30e:	e0 9e       	mul	r14, r16
 310:	c0 01       	movw	r24, r0
 312:	e1 9e       	mul	r14, r17
 314:	90 0d       	add	r25, r0
 316:	f0 9e       	mul	r15, r16
 318:	90 0d       	add	r25, r0
 31a:	11 24       	eor	r1, r1
 31c:	c8 1b       	sub	r28, r24
 31e:	d9 0b       	sbc	r29, r25
 320:	9e 01       	movw	r18, r28
 322:	36 95       	lsr	r19
 324:	27 95       	ror	r18
 326:	36 95       	lsr	r19
 328:	27 95       	ror	r18
 32a:	ab e7       	ldi	r26, 0x7B	; 123
 32c:	b4 e1       	ldi	r27, 0x14	; 20
 32e:	0e 94 cf 01 	call	0x39e	; 0x39e <__umulhisi3>
 332:	7c 01       	movw	r14, r24
 334:	f6 94       	lsr	r15
 336:	e7 94       	ror	r14
 338:	80 e3       	ldi	r24, 0x30	; 48
 33a:	8e 0d       	add	r24, r14
 33c:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_PutByte>
		LCD_PutByte((((res % 1000) % 100) / 10) + ASCII_NULL);
 340:	de 9c       	mul	r13, r14
 342:	c0 01       	movw	r24, r0
 344:	df 9c       	mul	r13, r15
 346:	90 0d       	add	r25, r0
 348:	11 24       	eor	r1, r1
 34a:	c8 1b       	sub	r28, r24
 34c:	d9 0b       	sbc	r29, r25
 34e:	9e 01       	movw	r18, r28
 350:	ad ec       	ldi	r26, 0xCD	; 205
 352:	bc ec       	ldi	r27, 0xCC	; 204
 354:	0e 94 cf 01 	call	0x39e	; 0x39e <__umulhisi3>
 358:	7c 01       	movw	r14, r24
 35a:	f6 94       	lsr	r15
 35c:	e7 94       	ror	r14
 35e:	f6 94       	lsr	r15
 360:	e7 94       	ror	r14
 362:	f6 94       	lsr	r15
 364:	e7 94       	ror	r14
 366:	80 e3       	ldi	r24, 0x30	; 48
 368:	8e 0d       	add	r24, r14
 36a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_PutByte>
		LCD_PutByte((((res % 1000) % 100) % 10) + ASCII_NULL);
 36e:	c7 01       	movw	r24, r14
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	ee 0c       	add	r14, r14
 376:	ff 1c       	adc	r15, r15
 378:	ee 0c       	add	r14, r14
 37a:	ff 1c       	adc	r15, r15
 37c:	ee 0c       	add	r14, r14
 37e:	ff 1c       	adc	r15, r15
 380:	e8 0e       	add	r14, r24
 382:	f9 1e       	adc	r15, r25
 384:	ce 01       	movw	r24, r28
 386:	8e 19       	sub	r24, r14
 388:	9f 09       	sbc	r25, r15
 38a:	80 5d       	subi	r24, 0xD0	; 208
 38c:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_PutByte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 390:	8f e3       	ldi	r24, 0x3F	; 63
 392:	9c e9       	ldi	r25, 0x9C	; 156
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <main+0xfa>
 398:	00 c0       	rjmp	.+0      	; 0x39a <main+0x100>
 39a:	00 00       	nop
 39c:	89 cf       	rjmp	.-238    	; 0x2b0 <main+0x16>

0000039e <__umulhisi3>:
 39e:	a2 9f       	mul	r26, r18
 3a0:	b0 01       	movw	r22, r0
 3a2:	b3 9f       	mul	r27, r19
 3a4:	c0 01       	movw	r24, r0
 3a6:	a3 9f       	mul	r26, r19
 3a8:	70 0d       	add	r23, r0
 3aa:	81 1d       	adc	r24, r1
 3ac:	11 24       	eor	r1, r1
 3ae:	91 1d       	adc	r25, r1
 3b0:	b2 9f       	mul	r27, r18
 3b2:	70 0d       	add	r23, r0
 3b4:	81 1d       	adc	r24, r1
 3b6:	11 24       	eor	r1, r1
 3b8:	91 1d       	adc	r25, r1
 3ba:	08 95       	ret

000003bc <_exit>:
 3bc:	f8 94       	cli

000003be <__stop_program>:
 3be:	ff cf       	rjmp	.-2      	; 0x3be <__stop_program>
