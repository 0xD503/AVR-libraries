
Bluetooth SPP-C Module.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000022a  000002be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000024  00800112  00800112  000002d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e9  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079e  00000000  00000000  00000db1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000446  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  00001998  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048a  00000000  00000000  00001adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002e2  00000000  00000000  00001f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <__vector_18>
  4c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e2       	ldi	r30, 0x2A	; 42
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5c 00 	call	0xb8	; 0xb8 <main>
  9e:	0c 94 13 01 	jmp	0x226	; 0x226 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <IO_Init>:
// const int8_t* ledOn = (int8_t* ) "Led is on";
// const int8_t* ledOff = (int8_t* ) "Led is off";

void IO_Init (void)
{
	LED_DDR |= 1 << LED_PIN;
  a6:	57 9a       	sbi	0x0a, 7	; 10
	LED_PORT &= ~(1 << LED_PIN);
  a8:	5f 98       	cbi	0x0b, 7	; 11
  aa:	08 95       	ret

000000ac <setup>:
}

void setup (void)
{
	IO_Init();
  ac:	0e 94 53 00 	call	0xa6	; 0xa6 <IO_Init>
	USART_Init();
  b0:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART_Init>
	//LCD_Init();
	
	sei();
  b4:	78 94       	sei
  b6:	08 95       	ret

000000b8 <main>:
}

int main(void)
{
	setup();
  b8:	0e 94 56 00 	call	0xac	; 0xac <setup>
	
	
    while (1) 
    {
//		while (USART_GetByte() == 0);
	    var = USART_GetByte();
  bc:	0e 94 a0 00 	call	0x140	; 0x140 <USART_GetByte>
		
		switch (var)
  c0:	81 36       	cpi	r24, 0x61	; 97
  c2:	19 f0       	breq	.+6      	; 0xca <main+0x12>
  c4:	82 36       	cpi	r24, 0x62	; 98
  c6:	39 f0       	breq	.+14     	; 0xd6 <main+0x1e>
  c8:	f9 cf       	rjmp	.-14     	; 0xbc <main+0x4>
		{
			case 'a':
			{
				LED_PORT &= ~(1 << LED_PIN);
  ca:	5f 98       	cbi	0x0b, 7	; 11
				//USART_PutByte('l');
				USART_SendString((int8_t* ) "LED: OFF");
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	0e 94 b3 00 	call	0x166	; 0x166 <USART_SendString>
				var = 0x00;	break;
  d4:	f3 cf       	rjmp	.-26     	; 0xbc <main+0x4>
			}
			
			case 'b':
			{
				LED_PORT |= 1 << LED_PIN;
  d6:	5f 9a       	sbi	0x0b, 7	; 11
				//USART_PutByte('k');
				USART_SendString((int8_t* ) "LED: ON");
  d8:	89 e0       	ldi	r24, 0x09	; 9
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	0e 94 b3 00 	call	0x166	; 0x166 <USART_SendString>
				var = 0x00;	break;
  e0:	ed cf       	rjmp	.-38     	; 0xbc <main+0x4>

000000e2 <USART_FlushBuffers>:
}

void USART_ReceiveString (int8_t* data)
{
	for (uint8_t i = 0; data[i] != 0; i++)	data[i] = USART_GetByte();					//	Read by byte, until we detect NULL character (or the end of the line)
}
  e2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <USART_TxHead>
  e6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <USART_TxTail>
  ea:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <USART_RxHead>
  ee:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
  f2:	08 95       	ret

000000f4 <USART_Init>:
  f4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  f8:	87 e6       	ldi	r24, 0x67	; 103
  fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  fe:	e1 ec       	ldi	r30, 0xC1	; 193
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	88 69       	ori	r24, 0x98	; 152
 106:	80 83       	st	Z, r24
 108:	e2 ec       	ldi	r30, 0xC2	; 194
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	86 60       	ori	r24, 0x06	; 6
 110:	80 83       	st	Z, r24
 112:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_FlushBuffers>
 116:	08 95       	ret

00000118 <USART_PutByte>:
 118:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <USART_TxTail>
 11c:	ef 5f       	subi	r30, 0xFF	; 255
 11e:	ef 70       	andi	r30, 0x0F	; 15
 120:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <USART_TxHead>
 124:	e9 17       	cp	r30, r25
 126:	e1 f3       	breq	.-8      	; 0x120 <USART_PutByte+0x8>
 128:	e0 93 14 01 	sts	0x0114, r30	; 0x800114 <USART_TxTail>
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ea 5d       	subi	r30, 0xDA	; 218
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	80 83       	st	Z, r24
 134:	e1 ec       	ldi	r30, 0xC1	; 193
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 62       	ori	r24, 0x20	; 32
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <USART_GetByte>:
 140:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USART_RxHead>
 144:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 148:	98 17       	cp	r25, r24
 14a:	d1 f3       	breq	.-12     	; 0x140 <USART_GetByte>
 14c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USART_RxHead>
 150:	8f 5f       	subi	r24, 0xFF	; 255
 152:	8f 70       	andi	r24, 0x0F	; 15
 154:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <USART_RxHead>
 158:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <USART_RxHead>
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ea 5e       	subi	r30, 0xEA	; 234
 160:	fe 4f       	sbci	r31, 0xFE	; 254
 162:	80 81       	ld	r24, Z
 164:	08 95       	ret

00000166 <USART_SendString>:
 166:	0f 93       	push	r16
 168:	1f 93       	push	r17
 16a:	cf 93       	push	r28
 16c:	fc 01       	movw	r30, r24
 16e:	80 81       	ld	r24, Z
 170:	88 23       	and	r24, r24
 172:	59 f0       	breq	.+22     	; 0x18a <USART_SendString+0x24>
 174:	8f 01       	movw	r16, r30
 176:	c0 e0       	ldi	r28, 0x00	; 0
 178:	0e 94 8c 00 	call	0x118	; 0x118 <USART_PutByte>
 17c:	cf 5f       	subi	r28, 0xFF	; 255
 17e:	f8 01       	movw	r30, r16
 180:	ec 0f       	add	r30, r28
 182:	f1 1d       	adc	r31, r1
 184:	80 81       	ld	r24, Z
 186:	81 11       	cpse	r24, r1
 188:	f7 cf       	rjmp	.-18     	; 0x178 <USART_SendString+0x12>
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <__vector_19>:

ISR (USART_UDRE_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	0f 92       	push	r0
 19a:	11 24       	eor	r1, r1
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	ef 93       	push	r30
 1a2:	ff 93       	push	r31
	if (USART_TxHead != USART_TxTail)													//	If there's a clean place in the buffer
 1a4:	90 91 15 01 	lds	r25, 0x0115	; 0x800115 <USART_TxHead>
 1a8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USART_TxTail>
 1ac:	98 17       	cp	r25, r24
 1ae:	69 f0       	breq	.+26     	; 0x1ca <__vector_19+0x38>
	{
		uint8_t tempTxHead = (USART_TxHead + 1) & USART_BUFFER_MASK;					//	Increment head
 1b0:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <USART_TxHead>
 1b4:	ef 5f       	subi	r30, 0xFF	; 255
 1b6:	ef 70       	andi	r30, 0x0F	; 15
		USART_TxHead = tempTxHead;
 1b8:	e0 93 15 01 	sts	0x0115, r30	; 0x800115 <USART_TxHead>
		UDR0 = USART_TransmitBuffer[tempTxHead];										//	And place in the USART Data Register byte
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ea 5d       	subi	r30, 0xDA	; 218
 1c0:	fe 4f       	sbci	r31, 0xFE	; 254
 1c2:	80 81       	ld	r24, Z
 1c4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <__vector_19+0x42>
	}
	else	UCSR0B &= ~(1 << UDRIE0);													//	Else disable interrupt
 1ca:	e1 ec       	ldi	r30, 0xC1	; 193
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	8f 7d       	andi	r24, 0xDF	; 223
 1d2:	80 83       	st	Z, r24
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	9f 91       	pop	r25
 1da:	8f 91       	pop	r24
 1dc:	0f 90       	pop	r0
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	0f 90       	pop	r0
 1e2:	1f 90       	pop	r1
 1e4:	18 95       	reti

000001e6 <__vector_18>:

ISR (USART_RX_vect)
{
 1e6:	1f 92       	push	r1
 1e8:	0f 92       	push	r0
 1ea:	0f b6       	in	r0, 0x3f	; 63
 1ec:	0f 92       	push	r0
 1ee:	11 24       	eor	r1, r1
 1f0:	8f 93       	push	r24
 1f2:	9f 93       	push	r25
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	int8_t byte = UDR0;																	//	Saving UDR value
 1f8:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	uint8_t tempRxTail = (USART_RxTail + 1) & USART_BUFFER_MASK;						//	Increment RxTail value
 1fc:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
 200:	ef 5f       	subi	r30, 0xFF	; 255
 202:	ef 70       	andi	r30, 0x0F	; 15
	USART_RxTail = tempRxTail;															//	Saving RxTail value
 204:	e0 93 12 01 	sts	0x0112, r30	; 0x800112 <__data_end>
	if (USART_RxHead == tempRxTail)																	
 208:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <USART_RxHead>
		//	Buffer overflow
		//
		
		//	PORTD |= 0x80;
	}
	USART_ReceiveBuffer[tempRxTail] = byte;												//	Saving UDR value in the receive buffer
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	ea 5e       	subi	r30, 0xEA	; 234
 210:	fe 4f       	sbci	r31, 0xFE	; 254
 212:	80 83       	st	Z, r24
 214:	ff 91       	pop	r31
 216:	ef 91       	pop	r30
 218:	9f 91       	pop	r25
 21a:	8f 91       	pop	r24
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <_exit>:
 226:	f8 94       	cli

00000228 <__stop_program>:
 228:	ff cf       	rjmp	.-2      	; 0x228 <__stop_program>
