
LCD1602 mega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000324  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010c  0080010c  000003c4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000434  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d4f  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000838  00000000  00000000  00001233  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000691  00000000  00000000  00001a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000150  00000000  00000000  000020fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000520  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003d4  00000000  00000000  0000276c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00002b40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e2       	ldi	r30, 0x24	; 36
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 30       	cpi	r26, 0x0D	; 13
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 43 01 	call	0x286	; 0x286 <main>
  9e:	0c 94 90 01 	jmp	0x320	; 0x320 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <LCD_GetAddressAndBFStatus>:
	
	lowNibble >>= 4;
	LCD_Data |= lowNibble;
	
	LCD_DDR |= (1 << LCD_DATA_PIN_4 | 1 << LCD_DATA_PIN_5 | 1 << LCD_DATA_PIN_6 | 1 << LCD_DATA_PIN_7);				//	Set LCD pins as outputs
	LCD_CheckBF();
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	8f 70       	andi	r24, 0x0F	; 15
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	8e 60       	ori	r24, 0x0E	; 14
  ae:	8a b9       	out	0x0a, r24	; 10
  b0:	8b b1       	in	r24, 0x0b	; 11
  b2:	8f 70       	andi	r24, 0x0F	; 15
  b4:	8b b9       	out	0x0b, r24	; 11
  b6:	5a 9a       	sbi	0x0b, 2	; 11
  b8:	59 98       	cbi	0x0b, 1	; 11
  ba:	f8 94       	cli
  bc:	5b 9a       	sbi	0x0b, 3	; 11
  be:	00 00       	nop
  c0:	00 00       	nop
  c2:	89 b1       	in	r24, 0x09	; 9
  c4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
  c8:	5b 98       	cbi	0x0b, 3	; 11
  ca:	00 00       	nop
  cc:	00 00       	nop
  ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
  d8:	5b 9a       	sbi	0x0b, 3	; 11
  da:	00 00       	nop
  dc:	00 00       	nop
  de:	89 b1       	in	r24, 0x09	; 9
  e0:	5b 98       	cbi	0x0b, 3	; 11
  e2:	78 94       	sei
  e4:	82 95       	swap	r24
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
  ec:	89 2b       	or	r24, r25
  ee:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
  f2:	8a b1       	in	r24, 0x0a	; 10
  f4:	80 6f       	ori	r24, 0xF0	; 240
  f6:	8a b9       	out	0x0a, r24	; 10
  f8:	08 95       	ret

000000fa <LCD_CheckBF>:
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_GetAddressAndBFStatus>
  fe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 102:	88 23       	and	r24, r24
 104:	d4 f3       	brlt	.-12     	; 0xfa <LCD_CheckBF>
 106:	08 95       	ret

00000108 <LCD_SendInstructionAndData>:
 108:	5a 98       	cbi	0x0b, 2	; 11
 10a:	61 11       	cpse	r22, r1
 10c:	02 c0       	rjmp	.+4      	; 0x112 <LCD_SendInstructionAndData+0xa>
 10e:	59 98       	cbi	0x0b, 1	; 11
 110:	01 c0       	rjmp	.+2      	; 0x114 <LCD_SendInstructionAndData+0xc>
 112:	59 9a       	sbi	0x0b, 1	; 11
 114:	f8 94       	cli
 116:	9b b1       	in	r25, 0x0b	; 11
 118:	9f 70       	andi	r25, 0x0F	; 15
 11a:	9b b9       	out	0x0b, r25	; 11
 11c:	9b b1       	in	r25, 0x0b	; 11
 11e:	28 2f       	mov	r18, r24
 120:	20 7f       	andi	r18, 0xF0	; 240
 122:	92 2b       	or	r25, r18
 124:	9b b9       	out	0x0b, r25	; 11
 126:	5b 9a       	sbi	0x0b, 3	; 11
 128:	00 00       	nop
 12a:	00 00       	nop
 12c:	00 00       	nop
 12e:	5b 98       	cbi	0x0b, 3	; 11
 130:	00 00       	nop
 132:	00 00       	nop
 134:	9b b1       	in	r25, 0x0b	; 11
 136:	9f 70       	andi	r25, 0x0F	; 15
 138:	9b b9       	out	0x0b, r25	; 11
 13a:	9b b1       	in	r25, 0x0b	; 11
 13c:	82 95       	swap	r24
 13e:	80 7f       	andi	r24, 0xF0	; 240
 140:	89 2b       	or	r24, r25
 142:	8b b9       	out	0x0b, r24	; 11
 144:	5b 9a       	sbi	0x0b, 3	; 11
 146:	00 00       	nop
 148:	00 00       	nop
 14a:	00 00       	nop
 14c:	5b 98       	cbi	0x0b, 3	; 11
 14e:	78 94       	sei
 150:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CheckBF>
 154:	08 95       	ret

00000156 <LCD_PutInstruction>:
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	0e 94 84 00 	call	0x108	; 0x108 <LCD_SendInstructionAndData>
 15c:	08 95       	ret

0000015e <LCD_PutByte>:
 15e:	61 e0       	ldi	r22, 0x01	; 1
 160:	0e 94 84 00 	call	0x108	; 0x108 <LCD_SendInstructionAndData>
 164:	08 95       	ret

00000166 <LCD_SendString>:
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	ec 01       	movw	r28, r24
 16c:	88 81       	ld	r24, Y
 16e:	88 23       	and	r24, r24
 170:	31 f0       	breq	.+12     	; 0x17e <LCD_SendString+0x18>
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_PutByte>
 178:	89 91       	ld	r24, Y+
 17a:	81 11       	cpse	r24, r1
 17c:	fb cf       	rjmp	.-10     	; 0x174 <LCD_SendString+0xe>
 17e:	df 91       	pop	r29
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <LCD_SendInteger>:
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	ec 01       	movw	r28, r24
 18a:	99 23       	and	r25, r25
 18c:	44 f4       	brge	.+16     	; 0x19e <LCD_SendInteger+0x1a>
 18e:	8d e2       	ldi	r24, 0x2D	; 45
 190:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_PutByte>
 194:	dd 23       	and	r29, r29
 196:	1c f4       	brge	.+6      	; 0x19e <LCD_SendInteger+0x1a>
 198:	d1 95       	neg	r29
 19a:	c1 95       	neg	r28
 19c:	d1 09       	sbc	r29, r1
 19e:	ce 01       	movw	r24, r28
 1a0:	68 ee       	ldi	r22, 0xE8	; 232
 1a2:	73 e0       	ldi	r23, 0x03	; 3
 1a4:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
 1a8:	ec 01       	movw	r28, r24
 1aa:	80 e3       	ldi	r24, 0x30	; 48
 1ac:	86 0f       	add	r24, r22
 1ae:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_PutByte>
 1b2:	ce 01       	movw	r24, r28
 1b4:	64 e6       	ldi	r22, 0x64	; 100
 1b6:	70 e0       	ldi	r23, 0x00	; 0
 1b8:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
 1bc:	ec 01       	movw	r28, r24
 1be:	80 e3       	ldi	r24, 0x30	; 48
 1c0:	86 0f       	add	r24, r22
 1c2:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_PutByte>
 1c6:	ce 01       	movw	r24, r28
 1c8:	6a e0       	ldi	r22, 0x0A	; 10
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	0e 94 68 01 	call	0x2d0	; 0x2d0 <__divmodhi4>
 1d0:	c8 2f       	mov	r28, r24
 1d2:	80 e3       	ldi	r24, 0x30	; 48
 1d4:	86 0f       	add	r24, r22
 1d6:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_PutByte>
 1da:	80 e3       	ldi	r24, 0x30	; 48
 1dc:	8c 0f       	add	r24, r28
 1de:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_PutByte>
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <LCD_SetPosition>:
 1e8:	90 e4       	ldi	r25, 0x40	; 64
 1ea:	69 9f       	mul	r22, r25
 1ec:	80 0d       	add	r24, r0
 1ee:	11 24       	eor	r1, r1
 1f0:	81 54       	subi	r24, 0x41	; 65
 1f2:	80 68       	ori	r24, 0x80	; 128
 1f4:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_PutInstruction>
 1f8:	08 95       	ret

000001fa <LCD_SetDDRAM>:
 1fa:	80 68       	ori	r24, 0x80	; 128
 1fc:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_PutInstruction>
 200:	08 95       	ret

00000202 <sendInstructionLCD8>:
}

void sendInstructionLCD8 (uint8_t byte)
{
	LCD_PORT = byte;
 202:	8b b9       	out	0x0b, r24	; 11
	LCD_STROBE_UP;
 204:	5b 9a       	sbi	0x0b, 3	; 11
	asm ("nop");
 206:	00 00       	nop
	asm ("nop");
 208:	00 00       	nop
	asm ("nop");
 20a:	00 00       	nop
	LCD_STROBE_DOWN;
 20c:	5b 98       	cbi	0x0b, 3	; 11
 20e:	08 95       	ret

00000210 <LCD_Init>:
}

void LCD_Init (void)
{
	cli();												//	Start the atomic operation
 210:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	99 ef       	ldi	r25, 0xF9	; 249
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <LCD_Init+0x6>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <LCD_Init+0xc>
 21c:	00 00       	nop
	
	_delay_ms(16);
	sendInstructionLCD8(0x30);							//	8-bit mode
 21e:	80 e3       	ldi	r24, 0x30	; 48
 220:	0e 94 01 01 	call	0x202	; 0x202 <sendInstructionLCD8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	8f e4       	ldi	r24, 0x4F	; 79
 226:	96 e4       	ldi	r25, 0x46	; 70
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <LCD_Init+0x18>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <LCD_Init+0x1e>
 22e:	00 00       	nop
	_delay_us(4500);
	sendInstructionLCD8(0x30);							//	8-bit mode
 230:	80 e3       	ldi	r24, 0x30	; 48
 232:	0e 94 01 01 	call	0x202	; 0x202 <sendInstructionLCD8>
 236:	8b ec       	ldi	r24, 0xCB	; 203
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Init+0x2a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Init+0x30>
 240:	00 00       	nop
	_delay_us(115);
	sendInstructionLCD8(0x30);							//	8-bit mode
 242:	80 e3       	ldi	r24, 0x30	; 48
 244:	0e 94 01 01 	call	0x202	; 0x202 <sendInstructionLCD8>
	LCD_CheckBF();										//	Busy Flag waiting
 248:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CheckBF>
	sendInstructionLCD8(0x20);							//	4-bit mode
 24c:	80 e2       	ldi	r24, 0x20	; 32
 24e:	0e 94 01 01 	call	0x202	; 0x202 <sendInstructionLCD8>
	LCD_CheckBF();
 252:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_CheckBF>
	LCD_PutInstruction(LCD_4_BIT_2_LINES_FONT_5X8);		//	Character font 5x8
 256:	88 e2       	ldi	r24, 0x28	; 40
 258:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_PutInstruction>
	
	sei();												//	End of the atomic operation
 25c:	78 94       	sei
	
	LCD_PutInstruction(LCD_SHIFT_CURSOR_TO_THE_RIGHT);	// 
 25e:	84 e1       	ldi	r24, 0x14	; 20
 260:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_PutInstruction>
	LCD_PutInstruction(LCD_CURSOR_ON_BLINKING_ON);		//	
 264:	8f e0       	ldi	r24, 0x0F	; 15
 266:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_PutInstruction>
	LCD_PutInstruction(LCD_INCREMENT_CURSOR);			// 
 26a:	86 e0       	ldi	r24, 0x06	; 6
 26c:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_PutInstruction>
	LCD_PutInstruction(LCD_RETURN_HOME);				//	Entry mode set
 270:	82 e0       	ldi	r24, 0x02	; 2
 272:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_PutInstruction>
	LCD_PutInstruction(LCD_CLEAR_DISPLAY);
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 ab 00 	call	0x156	; 0x156 <LCD_PutInstruction>
 27c:	08 95       	ret

0000027e <setup>:

void setup (void)
{
	io_Ini();
//	HC595_Init();
	LCD_Init();
 27e:	0e 94 08 01 	call	0x210	; 0x210 <LCD_Init>
	
	sei();
 282:	78 94       	sei
 284:	08 95       	ret

00000286 <main>:
}

int main (void)
{
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	2c 97       	sbiw	r28, 0x0c	; 12
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	f8 94       	cli
 294:	de bf       	out	0x3e, r29	; 62
 296:	0f be       	out	0x3f, r0	; 63
 298:	cd bf       	out	0x3d, r28	; 61
	setup();
 29a:	0e 94 3f 01 	call	0x27e	; 0x27e <setup>
	
//	int8_t a = 51;
// 	LCD_PutByte((a / 10) + ASCII_NULL);
// 	LCD_PutByte((a % 10) + ASCII_NULL);
	LCD_SetDDRAM(0x02);
 29e:	82 e0       	ldi	r24, 0x02	; 2
 2a0:	0e 94 fd 00 	call	0x1fa	; 0x1fa <LCD_SetDDRAM>
	char string[] = "Pointers :)";
 2a4:	8c e0       	ldi	r24, 0x0C	; 12
 2a6:	e0 e0       	ldi	r30, 0x00	; 0
 2a8:	f1 e0       	ldi	r31, 0x01	; 1
 2aa:	de 01       	movw	r26, r28
 2ac:	11 96       	adiw	r26, 0x01	; 1
 2ae:	01 90       	ld	r0, Z+
 2b0:	0d 92       	st	X+, r0
 2b2:	8a 95       	dec	r24
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <main+0x28>
	LCD_SendString((int8_t *) string);
 2b6:	ce 01       	movw	r24, r28
 2b8:	01 96       	adiw	r24, 0x01	; 1
 2ba:	0e 94 b3 00 	call	0x166	; 0x166 <LCD_SendString>
	LCD_SetPosition(1, 2);
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <LCD_SetPosition>
	LCD_SendInteger(-7777);
 2c6:	8f e9       	ldi	r24, 0x9F	; 159
 2c8:	91 ee       	ldi	r25, 0xE1	; 225
 2ca:	0e 94 c2 00 	call	0x184	; 0x184 <LCD_SendInteger>
 2ce:	ff cf       	rjmp	.-2      	; 0x2ce <main+0x48>

000002d0 <__divmodhi4>:
 2d0:	97 fb       	bst	r25, 7
 2d2:	07 2e       	mov	r0, r23
 2d4:	16 f4       	brtc	.+4      	; 0x2da <__divmodhi4+0xa>
 2d6:	00 94       	com	r0
 2d8:	07 d0       	rcall	.+14     	; 0x2e8 <__divmodhi4_neg1>
 2da:	77 fd       	sbrc	r23, 7
 2dc:	09 d0       	rcall	.+18     	; 0x2f0 <__divmodhi4_neg2>
 2de:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__udivmodhi4>
 2e2:	07 fc       	sbrc	r0, 7
 2e4:	05 d0       	rcall	.+10     	; 0x2f0 <__divmodhi4_neg2>
 2e6:	3e f4       	brtc	.+14     	; 0x2f6 <__divmodhi4_exit>

000002e8 <__divmodhi4_neg1>:
 2e8:	90 95       	com	r25
 2ea:	81 95       	neg	r24
 2ec:	9f 4f       	sbci	r25, 0xFF	; 255
 2ee:	08 95       	ret

000002f0 <__divmodhi4_neg2>:
 2f0:	70 95       	com	r23
 2f2:	61 95       	neg	r22
 2f4:	7f 4f       	sbci	r23, 0xFF	; 255

000002f6 <__divmodhi4_exit>:
 2f6:	08 95       	ret

000002f8 <__udivmodhi4>:
 2f8:	aa 1b       	sub	r26, r26
 2fa:	bb 1b       	sub	r27, r27
 2fc:	51 e1       	ldi	r21, 0x11	; 17
 2fe:	07 c0       	rjmp	.+14     	; 0x30e <__udivmodhi4_ep>

00000300 <__udivmodhi4_loop>:
 300:	aa 1f       	adc	r26, r26
 302:	bb 1f       	adc	r27, r27
 304:	a6 17       	cp	r26, r22
 306:	b7 07       	cpc	r27, r23
 308:	10 f0       	brcs	.+4      	; 0x30e <__udivmodhi4_ep>
 30a:	a6 1b       	sub	r26, r22
 30c:	b7 0b       	sbc	r27, r23

0000030e <__udivmodhi4_ep>:
 30e:	88 1f       	adc	r24, r24
 310:	99 1f       	adc	r25, r25
 312:	5a 95       	dec	r21
 314:	a9 f7       	brne	.-22     	; 0x300 <__udivmodhi4_loop>
 316:	80 95       	com	r24
 318:	90 95       	com	r25
 31a:	bc 01       	movw	r22, r24
 31c:	cd 01       	movw	r24, r26
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
